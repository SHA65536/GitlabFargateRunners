import sys
import subprocess

# Location of the gitlab-runner config files on the EC2
CONFIG_PATH = "/etc/gitlab-runner/config.toml"
FARGATE_PATH = "/etc/gitlab-runner/fargate.toml"

# Parts of the script that are auto-generated by the registration script that need to bechanged
REMOVE_TOML_1 = '''  [runners.cache]
    MaxUploadedArchiveSize = 0
  [runners.custom]
    run_exec = ""'''

REMOVE_TOML_2 = '''  [runners.custom]
    run_exec = ""'''

# Correct runner configuration
REPLACE_TOML = '''  builds_dir = "/opt/gitlab-runner/builds"
  cache_dir = "/opt/gitlab-runner/cache"
  [runners.custom]
    config_exec = "/opt/gitlab-runner/fargate"
    config_args = ["--config", "/etc/gitlab-runner/fargate.toml", "custom", "config"]
    prepare_exec = "/opt/gitlab-runner/fargate"
    prepare_args = ["--config", "/etc/gitlab-runner/fargate.toml", "custom", "prepare"]
    run_exec = "/opt/gitlab-runner/fargate"
    run_args = ["--config", "/etc/gitlab-runner/fargate.toml", "custom", "run"]
    cleanup_exec = "/opt/gitlab-runner/fargate"
    cleanup_args = ["--config", "/etc/gitlab-runner/fargate.toml", "custom", "cleanup"]'''

def main():
    if len(sys.argv) < 2:
        print("Usage: python register_runners.py [token1] [token2] ...")
        return
    # First we register each group on the runner
    register_commands()
    # Then we change parts of the auto-generated config to work with fargate
    clean_config()

def register_commands():
    # Get the list of tokens from command line arguments
    tokens = sys.argv[1:]

    # Run the `gitlab-runner` command with each token, registering it
    for i, token in enumerate(tokens):
        subprocess.run(["sudo", "gitlab-runner", "register", "--url", "https://gitlab.com/", "--registration-token", token, "--name", f"fargate-test-runner{i:03}", "--run-untagged", "--executor", "custom", "-n"])

def clean_config():
    # Read the auto-generated config
    with open(CONFIG_PATH, "r") as f:
        config_data = f.read()
    # Replace the generic config with the fargate config
    config_data = config_data.replace(REMOVE_TOML_1, REPLACE_TOML)
    config_data = config_data.replace(REMOVE_TOML_2, REPLACE_TOML)
    # Write the corrected config to disk
    with open(CONFIG_PATH, "w") as f:
        f.write(config_data)

if __name__ == "__main__":
    main()